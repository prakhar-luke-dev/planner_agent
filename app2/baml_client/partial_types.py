###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Add(BaseModel):
    num1_to_add: Optional[int] = None
    num2_to_add: Optional[int] = None

class Divide(BaseModel):
    num1_to_divide: Optional[int] = None
    num2_to_divide: Optional[int] = None

class Executor(BaseModel):
    plan: Optional[str] = None
    ans_part2: Optional[int] = None

class Multiply(BaseModel):
    num1_to_multiply: Optional[int] = None
    num2_to_multiply: Optional[int] = None

class Planner(BaseModel):
    steps: Optional[str] = None
    ans_part1: Optional[str] = None

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[str]
    skills: List[str]

class Subtract(BaseModel):
    num1_to_subtract: Optional[int] = None
    num2_to_subtract: Optional[int] = None
